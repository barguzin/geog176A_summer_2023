med_rent = "B25064_001",
med_month_mortgage = "B25088_001",
under18_nh = "B27010_017",
nh18_34 = "B27010_033",
nh35_64 = "B27010_050",
nh_over65 = "B27010_066",
medinc = "B19013_001",
medage = "B01002_001"),
#state = "CA",
#county = "Santa Barbara",
year = 2019,
survey='acs5',
#output = 'wide',
geometry = TRUE,
cb = TRUE
)
# check how many counties we have
head(us_data)
print(length(unique(us_data$GEOID))) # 3220 - seems about right
# pivot
wide_census = us_data %>%
pivot_wider(id_cols=GEOID, names_from=variable, values_from=estimate)
# read mob data
mob = read_csv('C:/Users/barguzin/Downloads/mob12.gz')
# tally nulls
#null_tibble = as_tibble(data.frame(obs_pct = round(colSums(!is.na(df[, my_vars]))/3140,2)))
# group by fips and get average
group_mob_census <- mob %>%
group_by(fips) %>%
summarise_at(my_vars, mean, na.rm=T) %>%
left_join(wide_census, by = c("fips" = "GEOID"))
null_tibble = as_tibble(data.frame(obs_pct = round(colSums(!is.na(group_mob_census[, my_vars]))/3140,2)))
null_tibble
# read geometry data
library(sf)
geo = st_read('C:/Users/barguzin/YandexDisk/ucsb/ucsb_wint2023/mob_sources_paper/county_geom.geojson')
# plot them
write_csv(group_mob_census, 'C:/Users/barguzin/Downloads/mob_census.gz')
null_tibble
# print summary of fitted data
print(as_tibble(data.frame(cbind(mobility_variable = var_labs, adjusted_R_sq = round(r_sq,2), pct_complete=null_tibble))))
# join
fips_geo = group_mob_census %>%
right_join(geo, by = c("fips" = "GEOID" ))
View(group_mob_census)
View(geo)
# join
fips_geo = group_mob_census %>%
right_join(geo)
View(geo)
st_write(rescale_geo_fips %>% select("GEOID", "geometry"),
'C:/Users/barguzin/YandexDisk/ucsb/ucsb_wint2023/mob_sources_paper/county_geom.geojson',
delete_dsn = TRUE)
View(rescale_geo_fips)
st_write(counties_geom,
'C:/Users/barguzin/YandexDisk/ucsb/ucsb_wint2023/mob_sources_paper/county_geom.geojson',
delete_dsn = TRUE)
# read geometry data
geo = st_read('C:/Users/barguzin/YandexDisk/ucsb/ucsb_wint2023/mob_sources_paper/county_geom.geojson')
# join
fips_geo = group_mob_census %>%
right_join(counties_geom, by = c("fips" = "GEOID" ))
library('tmap')
# plot them
tm_shape(fips_geo) +
tm_polygons(col = my_vars[1],
style = "quantile",
n = 5,
palette = "-RdBu",
title = "LM residuals",
legend.hist = TRUE) +
tm_layout(title = "Fitted Linear Regression",
frame = FALSE,
legend.outside = TRUE)
# convert to sf object
fips_geo = st_as_sf(fips_geo, sf_column_name = "geometry")
# plot them
tm_shape(fips_geo) +
tm_polygons(col = my_vars[1],
style = "quantile",
n = 5,
palette = "-RdBu",
title = "LM residuals",
legend.hist = TRUE) +
tm_layout(title = "Fitted Linear Regression",
frame = FALSE,
legend.outside = TRUE)
rescale_geo_fips <- shift_geometry(fips_geo2)
# plot them
tm_shape(rescale_geo_fips) +
tm_polygons(col = my_vars[1],
style = "quantile",
n = 5,
palette = "-RdBu",
title = my_vars[1],
legend.hist = TRUE) +
tm_layout(title = "Fitted Linear Regression",
frame = FALSE,
legend.outside = TRUE)
# plot them
tm_shape(rescale_geo_fips) +
tm_polygons(col = my_vars[2],
style = "quantile",
n = 5,
palette = "-RdBu",
title = my_vars[2],
legend.hist = TRUE) +
tm_layout(title = "Mobility Index",
frame = FALSE,
legend.outside = TRUE)
# plot them
tm_shape(rescale_geo_fips) +
tm_polygons(col = my_vars[8],
style = "quantile",
n = 5,
palette = "-RdBu",
title = my_vars[8],
legend.hist = TRUE) +
tm_layout(title = "Mobility Index",
frame = FALSE,
legend.outside = TRUE)
hist(mob$cmi)
hist(group_mob_census$cmi)
library(tidyverse)
library(car)
library(corrplot)
library(tidymodels)
library(data.table)
library(ggExtra) # for awesome plots
library(rgdal)
library(spdep)
library(spgwr)
library(tidycensus)
library(sf)
library(tmap)
library(tigris)
options(tigris_use_cache = TRUE)
df = read_csv('C:/Users/barguzin/Downloads/mob_census.gz')
# mobility vars
my_vars = c(
"all_day_bing_tiles_visited_relative_change",
"dex_a",
"retail_and_recreation_percent_change_from_baseline",
"m50_index",
"apple_mobility",
"staying_home_umd",
"miles_per_person_umd",
"cmi",
"sheltered_in_place_7days_rolling_avg",
"county_vmt",
"sg_sheltered",
"sg_avg_dist2"
)
var_labs = c(
"Facebook",
"PlaceIQ",
"Google",
"Descartes Labs",
"Apple",
"UMD - Staying home",
"UMD - VMT",
"Cuebiq - CMI",
"Cuebiq - Sheltered",
"StreetLight - VMT",
"SG - Sheltered",
"SG - Distance traveled"
)
# tally nulls
null_tibble = as_tibble(data.frame(obs_pct = round(colSums(!is.na(df[, my_vars]))/3140,2)))
# create X
predictors = df %>% select(-any_of(my_vars)) %>% colnames()
predictors = predictors[-1] # remove fips from predi
#my_data_corr = cor(df[,predictors], use='complete.obs')
#corrplot(my_data_corr)
# need to convert race variables to pct
df$white_pct = df$white / df$pop
df$hisp_pct = df$hisp / df$pop
df$car_pct = df$car / df$pop
df$fam_hh_pct = df$family_hh / df$tot_hh
df$mar_chi_pct = df$married_fam_child / df$tot_hh
df$bach_pct = df$bach / df$pop
# med_inc
df$food_pct = df$foodstamps / df$tot_hh
df$vac_pct = df$vacant_units / df$house_units
# med_year_built
# med_rent
df$no_hi_pct = df$nh_over65/df$pop
predictors_2 = c('white_pct', 'hisp_pct', 'car_pct', 'mar_chi_pct', 'bach_pct', 'pop',
'medinc', 'food_pct', 'vac_pct', 'med_year_built', 'no_hi_pct', 'medage')
# 'fam_hh_pct', 'med_rent'
###############################
####### linear modeling #######
###############################
m1 = lm(data=df, paste0("cmi ~ ", paste(predictors_2, collapse=" + ")))
summary(m1)
vif(m1)
form_vec = c()
r_sq = c()
#n_obs = c()
coef_list = list()
resid_list = list()
# create a new dataframe with fips
fips_df = df[,'fips']
for (i in 1:length(my_vars)) {
form_vec[i] = paste0(my_vars[i], " ~ ", paste(predictors_2, collapse=" + "))
m = lm(data=df, paste0(my_vars[i], " ~ ", paste(predictors_2, collapse=" + ")))
r_sq[i] = summary(m)$adj.r.squared
coef_list[[i]] = m$coefficients
resid_list[[i]] = m$residuals
fips_df[is.na(df[,my_vars[i]]), my_vars[i]] = m$residuals[is.na(df[,my_vars[i]])]
#n_obs[i] = nobs(m)
}
# name vars
colnames(fips_df) <- c('fips', my_vars)
# print summary of fitted data
print(as_tibble(data.frame(cbind(mobility_variable = var_labs, adjusted_R_sq = round(r_sq,2), pct_complete=null_tibble))))
# grab geometry for counties
counties_geom <- get_acs(
geography = "county",
variables = "B19013_001",
geometry = TRUE,
year = 2020
)
# join geometry
fips_geo = fips_df %>%
right_join(counties_geom, by = c("fips" = "GEOID" ))
# convert to sf object
fips_geo = st_as_sf(fips_geo, sf_column_name = "geometry")
# separate columns with names
fips_geo2 <- fips_geo %>%
separate(NAME, into = c("county", "state"),
sep = ", ")
rescale_geo_fips <- shift_geometry(fips_geo2)
st_write(counties_geom,
'C:/Users/barguzin/YandexDisk/ucsb/ucsb_wint2023/mob_sources_paper/county_geom.geojson',
delete_dsn = TRUE)
##############################
# create a map visualization #
##############################
tm_shape(rescale_geo_fips) +
tm_polygons(col = my_vars[1],
style = "quantile",
n = 5,
palette = "-RdBu",
title = "LM residuals",
legend.hist = TRUE) +
tm_layout(title = "Fitted Linear Regression",
frame = FALSE,
legend.outside = TRUE)
# convert wide format to long for facet mapping
rescale_geo_fips_long <- rescale_geo_fips %>%
select('fips', 'geometry', all_of(my_vars)) %>%
pivot_longer(!c('fips', 'geometry'), names_to = "mobility", values_to = "vals")
facet_map <- tm_shape(rescale_geo_fips_long) +
tm_facets(by = "mobility", scale.factor = 4) +
tm_fill(col = "vals",
style = "quantile",
n = 5,
palette = "Blues") +
tm_layout(legend.position = c(-0.7, 0.15))
#  plot
facet_map
#####################
# we need to check how the sign changes for different predictors
# grab predictors
var_coefs = transpose(rbindlist(lapply(coef_list, as.data.frame.list)))
# some renaming here
colnames(var_coefs) <- var_labs
var_coefs$predictor = c('intercept', predictors_2)
# re-order
var_coefs = var_coefs %>% select(predictor, var_labs[1]:var_labs[length(var_labs)])
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #
# looks like the coefficients will be different    #
# because distance-based mobility indicators will  #
# typically have various sign for white_pct        #
# to-do:
# 1. Plot residuals from the model
#   A - qqplots
#   B - geographic maps
#   C - run a spatial lag model
par(mfrow=c(3,4))
for (i in 1:length(form_vec)) {
qqnorm(resid_list[[i]], main=var_labs[i])
qqline(resid_list[[i]])
}
length(df$all_day_bing_tiles_visited_relative_change)
length(m1$residuals)
length(m1$fitted.values)
fips_df$...2
# Load dmetar, esc and tidyverse (for pipe)
library(dmetar)
library(esc)
library(tidyverse)
# Load data set from dmetar
data(SuicidePrevention)
install.packages("dmetar")
install.packages("esc")
# Load dmetar, esc and tidyverse (for pipe)
library(dmetar)
library(esc)
library(tidyverse)
# Load data set from dmetar
data(SuicidePrevention)
install.packages("dmetar")
# Load dmetar, esc and tidyverse (for pipe)
library(dmetar)
library(esc)
library(tidyverse)
# Load data set from dmetar
data(SuicidePrevention)
install.packages('dmetar')
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("MathiasHarrer/dmetar")
# Load dmetar, esc and tidyverse (for pipe)
library(dmetar)
# Load dmetar, esc and tidyverse (for pipe)
library(dmetar)
devtools::install_github("MathiasHarrer/dmetar")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("MathiasHarrer/dmetar")
install.packages('MuMIn')
shiny::runApp('C:/Users/barguzin/YandexDisk/ucsb/gulag_app/gulag_expeditions')
library(sf)
library(tidyverse)
library(leaflet)
library(shiny)
# read data
# forest expeditions
pts = read.csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/points.csv", encoding = 'UTF-8')
# gulag camps
sgu2 = read_csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/gulags.csv")
pal <- colorFactor(palette = c("brown", "forestgreen"),
levels = c("labor camps", "expeditions"))
# camp_id 508 (GB) and 577 (Greece)
sgu2 <- sgu2 %>%
filter((camp_id != 508) & (camp_id !=571))
# app
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles('Esri.WorldPhysical') %>% # Stamen.Terrain is also good
addCircleMarkers(lng = sgu2$lng, lat = sgu2$lat,
popup = paste0("<h5 style='color:blue;'>", sgu2$CAMP_NAME, "</h5>", #"<br>",
"(", sgu2$year_start, " - ", sgu2$year_end, ")", "<br>",
sgu2$camp_type, "<br>",
"total prisoners: ", sgu2$sum_prison),
radius=5, color='brown',
stroke=F, fillOpacity = 1,
group='labor camps') %>%
addCircleMarkers(lng = pts$longitude, lat=pts$latitude,
popup = paste0("<h5 style='color:blue;'>", pts$name, "</h5>"),
radius=7, color='forestgreen',
group='expeditions') %>%
addLegend(pal = pal, values=c("labor camps", "expeditions")) %>%
addLayersControl(overlayGroups = c("labor camps", "expeditions")) #%>%
#addFullscreenControl()
})
}
shinyApp(ui, server)
View(pts)
colnames(pts)[1] <- 'pts_name'
library(sf)
library(tidyverse)
library(leaflet)
library(shiny)
# read data
# forest expeditions
pts = read.csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/points.csv", encoding = 'UTF-8')
colnames(pts)[1] <- 'pts_name'
# gulag camps
sgu2 = read_csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/gulags.csv")
pal <- colorFactor(palette = c("brown", "forestgreen"),
levels = c("labor camps", "expeditions"))
# camp_id 508 (GB) and 577 (Greece)
sgu2 <- sgu2 %>%
filter((camp_id != 508) & (camp_id !=571))
# app
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles('Esri.WorldPhysical') %>% # Stamen.Terrain is also good
addCircleMarkers(lng = sgu2$lng, lat = sgu2$lat,
popup = paste0("<h5 style='color:blue;'>", sgu2$CAMP_NAME, "</h5>", #"<br>",
"(", sgu2$year_start, " - ", sgu2$year_end, ")", "<br>",
sgu2$camp_type, "<br>",
"total prisoners: ", sgu2$sum_prison),
radius=5, color='brown',
stroke=F, fillOpacity = 1,
group='labor camps') %>%
addCircleMarkers(lng = pts$longitude, lat=pts$latitude,
popup = paste0("<h5 style='color:blue;'>", pts$pts_name, "</h5>"),
radius=7, color='forestgreen',
group='expeditions') %>%
addLegend(pal = pal, values=c("labor camps", "expeditions")) %>%
addLayersControl(overlayGroups = c("labor camps", "expeditions")) #%>%
#addFullscreenControl()
})
}
shinyApp(ui, server)
library(sf)
library(tidyverse)
library(leaflet)
library(shiny)
# read data
# forest expeditions
pts = read.csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/points.csv", encoding = 'UTF-8')
colnames(pts)[1] <- 'pts_name'
# gulag camps
sgu2 = read_csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/gulags.csv")
pal <- colorFactor(palette = c("brown", "forestgreen"),
levels = c("labor camps", "expeditions"))
# camp_id 508 (GB) and 577 (Greece)
sgu2 <- sgu2 %>%
filter((camp_id != 508) & (camp_id !=571))
# app
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles('Esri.WorldPhysical') %>% # Stamen.Terrain is also good
addCircleMarkers(lng = sgu2$lng, lat = sgu2$lat,
popup = paste0("<h5 style='color:red;'>", sgu2$CAMP_NAME, "</h5>", #"<br>",
"(", sgu2$year_start, " - ", sgu2$year_end, ")", "<br>",
sgu2$camp_type, "<br>",
"total prisoners: ", sgu2$sum_prison),
radius=5, color='brown',
stroke=F, fillOpacity = 1,
group='labor camps') %>%
addCircleMarkers(lng = pts$longitude, lat=pts$latitude,
popup = paste0("<h5 style='color:forestgreen;'>", pts$pts_name, "</h5>"),
radius=7, color='forestgreen',
group='expeditions') %>%
addLegend(pal = pal, values=c("labor camps", "expeditions")) %>%
addLayersControl(overlayGroups = c("labor camps", "expeditions")) #%>%
#addFullscreenControl()
})
}
shinyApp(ui, server)
runApp('C:/Users/barguzin/YandexDisk/ucsb/gulag_app/gulag_expeditions')
library(sf)
library(tidyverse)
library(leaflet)
library(shiny)
# read data
# forest expeditions
pts = read.csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/points.csv", encoding = 'UTF-8')
colnames(pts)[1] <- 'pts_name'
# gulag camps
sgu2 = read_csv("C:/Users/barguzin/YandexDisk/ucsb/gulag_app/data/gulags.csv")
pal <- colorFactor(palette = c("brown", "forestgreen"),
levels = c("labor camps", "expeditions"))
# camp_id 508 (GB) and 577 (Greece)
sgu2 <- sgu2 %>%
filter((camp_id != 508) & (camp_id !=571))
# app
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles('Esri.WorldPhysical') %>% # Stamen.Terrain is also good
addCircleMarkers(lng = sgu2$lng, lat = sgu2$lat,
popup = paste0("<h5 style='color:red;'>", sgu2$CAMP_NAME, "</h5>", #"<br>",
"(", sgu2$year_start, " - ", sgu2$year_end, ")", "<br>",
sgu2$camp_type, "<br>",
"total prisoners: ", sgu2$sum_prison),
radius=5, color='brown',
stroke=F, fillOpacity = 1,
group='labor camps') %>%
addCircleMarkers(lng = pts$longitude, lat=pts$latitude,
popup = paste0("<h5 style='color:forestgreen;'>", pts$pts_name, "</h5>"),
radius=7, color='forestgreen',
group='expeditions') %>%
addLegend(pal = pal, values=c("labor camps", "expeditions")) %>%
addLayersControl(overlayGroups = c("labor camps", "expeditions")) #%>%
#addFullscreenControl()
})
}
shinyApp(ui, server)
shinyApp(ui, server)
setwd("C:/Users/barguzin/Documents/Github/geog176A_summer_2023/")
gewd
getwd()
install.packages("quarto")
quarto::quarto_render(
"lecture01.qmd",
output_format = c("all")
)
quarto::quarto_render(
"C:/Users/barguzin/Documents/Github/geog176A_summer_2023/lecture_slides/lecture01.qmd",
output_format = c("all")
)
quarto::quarto_render(
"C:/Users/barguzin/Documents/Github/geog176A_summer_2023/lecture_slides/lecture01.qmd",
output_format = c("all")
)
